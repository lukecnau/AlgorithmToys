package aes;

import tools.TOOLS;
import tools.LOG;

public class testAESMain {
	private static LOG log = LOG.getInstance();
	private static TOOLS tools = TOOLS.getInstance();
	
	private static void test_KeyExpansion() {
		byte[] key128 = {0x2b, 0x7e, 0x15, 0x16, 0x28, (byte) 0xae, (byte) 0xd2, (byte) 0xa6, (byte) 0xab, (byte) 0xf7, 0x15, (byte) 0x88, 0x09, (byte) 0xcf, 0x4f, 0x3c};

		byte[] key192 = {
				(byte) 0x8e, 0x73, (byte) 0xb0, (byte) 0xf7, (byte) 0xda, 0x0e, 0x64, 0x52, (byte) 0xc8, 0x10, (byte) 0xf3, 0x2b, 
				(byte) 0x80, (byte) 0x90, (byte) 0x79, (byte) 0xe5, (byte) 0x62, (byte) 0xf8, (byte) 0xea, (byte) 0xd2, (byte) 0x52, (byte) 0x2c, (byte) 0x6b, 0x7b};

		byte[] key256 = {
				0x60, 0x3d, (byte) 0xeb, 0x10, 0x15, (byte) 0xca, 0x71, (byte) 0xbe, 0x2b, 0x73, (byte) 0xae, (byte) 0xf0, (byte) 0x85, 0x7d, 0x77, (byte) 0x81, 
				0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, (byte) 0xd7, 0x2d, (byte) 0x98, 0x10, (byte) 0xa3, 0x09, 0x14, (byte) 0xdf, (byte) 0xf4};
		
		AES_KEY key = new AES_KEY(key192);
		
		key.keyExpansion();
	}
	



	private static void test_SimpleCipher() {
		byte[] key128 = {0x2b, 0x7e, 0x15, 0x16, 0x28, (byte) 0xae, (byte) 0xd2, (byte) 0xa6, (byte) 0xab, (byte) 0xf7, 0x15, (byte) 0x88, 0x09, (byte) 0xcf, 0x4f, 0x3c};
	
		byte[] plaintext = {0x32, 0x43, (byte) 0xf6, (byte) 0xa8, (byte) 0x88, 0x5a, 0x30, (byte) 0x8d, 0x31, 0x31, (byte) 0x98, (byte) 0xa2, (byte) 0xe0, 0x37, 0x07, 0x34};
		
		AES_KEY key = new AES_KEY(key128);
		
		key.keyExpansion();
		
		AES aes = new AES();
		
		byte[] result = new byte[aes.AES_A_BLOCK_BYTES];
		
		aes.Cipher(plaintext, key, result);
		
		log.printBytesInHEX("Result=", result, 0, result.length);
	}
	
	private static void test_aes_128() {
		byte[] key128 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
		
		byte[] plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff};
			
		AES_KEY key = new AES_KEY(key128);
		
		key.keyExpansion();
		
		AES aes = new AES();
		
		byte[] result1 = new byte[aes.AES_A_BLOCK_BYTES];
		
		aes.Cipher(plaintext, key, result1);
		
		byte[] result2 = new byte[aes.AES_A_BLOCK_BYTES];
	
		aes.InvCipher(result1, key, result2);
	}
	
	
	private static void test_aes_192() {
		byte[] key192 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};
		
		byte[] plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff};
			
		AES_KEY key = new AES_KEY(key192);
		
		key.keyExpansion();
		
		AES aes = new AES();
		
		byte[] result1 = new byte[aes.AES_A_BLOCK_BYTES];
		
		aes.Cipher(plaintext, key, result1);
		
		byte[] result2 = new byte[aes.AES_A_BLOCK_BYTES];
	
		aes.InvCipher(result1, key, result2);
	}
	
	private static void test_aes_256() {
		byte[] key256 = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
		
		byte[] plaintext = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff};
			
		AES_KEY key = new AES_KEY(key256);
		
		key.keyExpansion();
		
		AES aes = new AES();
		
		byte[] result1 = new byte[aes.AES_A_BLOCK_BYTES];
		
		aes.Cipher(plaintext, key, result1);
		
		byte[] result2 = new byte[aes.AES_A_BLOCK_BYTES];
	
		aes.InvCipher(result1, key, result2);
	}
	
	private static void test_leftShiftNBytes() {
		byte[] test = {0x12,0x34,0x56, 0x78,(byte) 0x9a, (byte) 0xbc, (byte) 0xde, (byte) 0xf0, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88};
		
		log.printBytesInHEX("before shift=", test, 0, test.length);
		tools.leftShiftNBytes(test, 0, 4, test, 0, 3);
		log.printBytesInHEX("after shift=", test, 0, test.length);
	}
	
	public static void main(String[] args) {

//		test_KeyExpansion();
			
//		test_SimpleCipher();
//		
//		test_aes_128();
		
//		test_aes_192();

		test_aes_256();
		
//		test_leftShiftNBytes();
	}




}
